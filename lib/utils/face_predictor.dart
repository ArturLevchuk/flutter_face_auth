import 'dart:convert';
import 'dart:developer';
import 'dart:io';
import 'dart:math' as math;
import 'dart:typed_data';
import 'package:camera/camera.dart';
import 'package:flutter/material.dart';
import 'package:google_mlkit_face_detection/google_mlkit_face_detection.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'package:image/image.dart' as imglib;
import 'image_converter.dart';

class FacePredictor {
  //final int inputDims = 112;
  //final int outputDims = 192;

  final int inputDims = 160;
  final int outputDims = 512;

  Interpreter? _interpreter;
  double threshold = 0.5;

  List _predictedData = [];

  List get predictedData => _predictedData;

  Function(imglib.Image)? onFaceCaptured;

  bool initialized = false;

  Future init(VoidCallback cb) async {
    late Delegate delegate;

    try {
      if (Platform.isAndroid) {
        delegate = GpuDelegateV2(
          options: GpuDelegateOptionsV2(
            isPrecisionLossAllowed: false,            
          ),
        );
      } else if (Platform.isIOS) {
        delegate = GpuDelegate(
          options: GpuDelegateOptions(
            allowPrecisionLoss: true,
          ),
        );
      }
      var interpreterOptions = InterpreterOptions()..addDelegate(delegate);

      _interpreter = await Interpreter.fromAsset(
        'assets/facenet_512.tflite',
        options: interpreterOptions,
      );

      initialized = true;
    } catch (e) {
      print('Failed to load model.');
      print(e);
    }

    cb();
  }

  //https://github.com/MCarlomagno/FaceRecognitionAuth/blob/master/lib/services/ml_service.dart

  void setCurrentPrediction(CameraImage cameraImage, Face? face) {
    if (_interpreter == null) throw Exception('Interpreter is null');
    if (face == null) throw Exception('Face is null');
    List input = _preProcess(cameraImage, face);

    input = input.reshape([1, inputDims, inputDims, 3]);
    List output = List.generate(1, (index) => List.filled(outputDims, 0));

    _interpreter?.run(input, output);
    output = output.reshape([outputDims]);

    _predictedData = List.from(output);

    final test = [0.29586654901504517, 0.057263415306806564, -0.15930429100990295, 0.6382105350494385, -0.5747745037078857, -0.09280436486005783, -0.1562553197145462, -0.4565720558166504, -1.3326621055603027, -0.5224700570106506, 0.29129278659820557, 0.1829637885093689, -0.770281195640564, -0.5064972043037415, -0.527653694152832, 1.0485305786132812, -0.7328829169273376, 0.7841078639030457, -1.20804762840271, 0.7650320529937744, 0.1422787308692932, 0.30656102299690247, 0.2918461561203003, -0.6462942361831665, 0.25297680497169495, 1.4338287115097046, 0.6076554656028748, -0.9849348068237305, 0.8550047278404236, -0.5947945713996887, -0.20674176514148712, 0.6869307160377502, -0.7222018241882324, 1.421123743057251, -0.8495199680328369, 1.0735440254211426, 0.8762835264205933, -0.9657199382781982, -0.18869540095329285, 1.4107398986816406, 0.9219793081283569, -1.976815938949585, -0.21239762008190155, -0.003999330103397369, 0.20898926258087158, -0.19784528017044067, -1.1122114658355713, 1.0089526176452637, -0.28005412220954895, 1.6495134830474854, 0.5841415524482727, -1.209436297416687, -0.3487313985824585, 0.3941876292228699, 0.3218809962272644, -0.3219819664955139, -0.9836859107017517, 0.507635772228241, 0.8618806004524231, -0.8365066051483154, 1.2136660814285278, 0.7789380550384521, -0.42357486486434937, 0.49645739793777466, -0.049975425004959106, 0.35735511779785156, -0.4569084346294403, 0.23383060097694397, -0.5836644768714905, -0.5106127262115479, -0.3666825294494629, 0.9747142791748047, -0.2164515256881714, 1.2837015390396118, 0.2963869571685791, -0.7639980912208557, -0.8138064742088318, -0.11412344872951508, -0.5915498733520508, -1.7727628946304321, 0.7291820049285889, -0.1190154105424881, -0.10241732746362686, -1.3965487480163574, -0.17055127024650574, 0.32465773820877075, 0.6285197734832764, -0.2960748076438904, -0.26588374376296997, 0.013854729011654854, 1.1657241582870483, -0.6845047473907471, -0.5054503083229065, -0.6700663566589355, 0.1905222088098526, 0.39753258228302, 1.3364384174346924, -0.13920503854751587, -1.4791569709777832, 1.1227123737335205, 0.1344241350889206, -0.46230146288871765, 0.3612360656261444, 0.13886740803718567, -1.3843271732330322, -1.5953785181045532, 1.2555738687515259, -0.5946025848388672, -1.8523032665252686, -0.533208429813385, 1.2155345678329468, -0.6337102055549622, 1.3590894937515259, 0.6514323353767395, 0.9198141694068909, -1.436799168586731, -0.7743808627128601, -0.5317659378051758, -1.0024975538253784, -0.03175930678844452, 0.778657078742981, 1.7449365854263306, -0.7776772379875183, 0.2760579586029053, -1.2668328285217285, -1.8635358810424805, 0.09013894945383072, 0.27059298753738403, 0.691297709941864, -0.5476720929145813, 0.35919368267059326, -1.8044013977050781, -1.1728540658950806, 0.19367188215255737, -1.4390294551849365, -0.848708987236023, 0.756843626499176, -0.32559841871261597, -0.12145943939685822, 2.1602783203125, 1.9690550565719604, -0.21535363793373108, -0.5303239226341248, 0.6717913746833801, -0.08193030953407288, -0.1337786614894867, 0.760761022567749, 0.15882182121276855, 0.06667989492416382, -0.5708279609680176, 0.42419347167015076, 1.1199570894241333, -1.7692644596099854, -1.520265817642212, 1.8442009687423706, -0.7208800911903381, -0.9479022026062012, 0.5634667873382568, -0.7558627724647522, 1.7256804704666138, -0.3143655061721802, -0.25533750653266907, 0.47145605087280273, 1.1161493062973022, -0.6526842713356018, 1.0494093894958496, -0.7434056997299194, -0.702572226524353, -0.7899996042251587, -0.7143131494522095, -1.267850637435913, 0.35318946838378906, 0.4218471944332123, 0.7997645139694214, 2.185352087020874, 0.6098160147666931, -0.9826197624206543, 0.39005136489868164, -1.073226809501648, 1.6917589902877808, -0.05277310311794281, -0.563136100769043, -0.11070360243320465, 0.25972601771354675, -0.19307191669940948, -0.5855165719985962, 0.23850688338279724, -0.27105724811553955, 1.0801986455917358, 1.1781336069107056, 0.5921997427940369, 0.6529607176780701, 0.8761599063873291, -0.5281170606613159, -0.652961790561676, 0.20135320723056793, -1.4952481985092163, 0.8343222737312317, -0.42796772718429565, -1.173009991645813, 0.03903978690505028, -1.0171018838882446, -0.7065584659576416, 0.7809519171714783, 1.6321771144866943, -1.2781256437301636, 0.7832005620002747, 0.952907145023346, -0.7515559792518616, -0.42311543226242065, 0.4494340717792511, -0.9394342303276062, 1.7752939462661743, 1.1185054779052734, -0.3358721435070038, 0.10644231736660004, -0.5275945067405701, -0.11208884418010712, -1.0493351221084595, 0.43425750732421875, -0.8356203436851501, -0.6537262797355652, -0.29535001516342163, -0.2497757077217102, 0.2480435073375702, 1.4974366426467896, 0.1997312605381012, 0.13897736370563507, -0.21579475700855255, 0.1713477522134781, -0.13266098499298096, 1.2905571460723877, -0.9965255856513977, -1.133293628692627, -0.7127559781074524, 0.4836675524711609, -0.7288854122161865, 0.8313888311386108, 0.5342991948127747, -0.10454469919204712, -1.6726323366165161, 0.8436448574066162, -0.5126428604125977, 1.0972366333007812, 0.9978440403938293, 0.27608007192611694, 1.236080288887024, -0.16160285472869873, 0.6830620765686035, -0.03808340057730675, -1.6044107675552368, 0.6074368953704834, -0.3484854996204376, -1.2532609701156616, 0.5769497752189636, -0.646553099155426, -0.7749305963516235, -0.10914313048124313, -0.8416069746017456, 2.3714334964752197, 0.7553396821022034, 0.5111286044120789, -1.4051412343978882, -0.24981003999710083, -0.8676638603210449, -1.0723246335983276, -0.1215599998831749, -1.095698356628418, -0.6740094423294067, -1.9054850339889526, 0.3490329086780548, 0.7667181491851807, 0.3976752460002899, -0.06637729704380035, 1.549536943435669, 0.7990066409111023, 0.7730903029441833, -0.9630934000015259, 1.4963924884796143, 1.053360939025879, -0.41870975494384766, -0.44118422269821167, -1.440650463104248, -0.42606300115585327, 0.07526485621929169, -0.8064265847206116, -0.5770747065544128, 0.44648823142051697, 0.4454081952571869, 1.4829858541488647, -0.9976696968078613, 0.0628996342420578, 0.6672182083129883, 0.4379233717918396, 0.4213084280490875, -0.3049471974372864, -1.7053495645523071, 0.11421195417642593, -0.45504042506217957, 0.17395733296871185, -0.31262215971946716, -0.7738491892814636, 0.7567116618156433, 1.2890899181365967, 0.5733797550201416, -0.0855901911854744, 0.06611970067024231, 0.0008127614855766296, -0.0006198585033416748, 0.5650450587272644, 0.4117330014705658, 0.9578849673271179, 0.8579822182655334, 0.1429809182882309, 0.5664979219436646, 0.9750174880027771, -0.4350842237472534, -0.5461016297340393, 0.11501946300268173, 0.8732284307479858, 1.4992026090621948, -0.16341090202331543, -1.8868408203125, 1.112256407737732, 0.3094329833984375, -0.16948923468589783, -0.4861578643321991, 0.4554261267185211, -1.8372129201889038, 0.4664059281349182, -0.0986378863453865, -0.8624964952468872, -0.5586504936218262, 0.6715695858001709, 0.6645662784576416, 0.6162959933280945, 0.2711867690086365, -0.2380354106426239, 0.026599107310175896, -0.5079077482223511, -0.673514723777771, -0.3268190622329712, 1.8137813806533813, -0.41255709528923035, 0.47467291355133057, 0.8069860935211182, 0.37836238741874695, 0.28437960147857666, 0.22256334125995636, 0.1461280882358551, -1.5250742435455322, -0.2791069746017456, 0.7214347124099731, 0.26227548718452454, -0.5743043422698975, 0.8302580118179321, 0.8835134506225586, -0.7796313762664795, 0.4248747229576111, -0.057682547718286514, 0.05725860223174095, -1.0377525091171265, 0.941710889339447, -0.6016191840171814, 0.5036355257034302, -0.568861186504364, -0.2547262907028198, 0.5347575545310974, -1.1272923946380615, -1.8908787965774536, 1.108359932899475, -0.8278844356536865, -0.5665193200111389, -0.1806114912033081, -0.98414546251297, 1.1355817317962646, -0.21176190674304962, 1.3465306758880615, -1.0885480642318726, -0.4715918302536011, -0.8059635758399963, 0.8031355142593384, 0.9199909567832947, 0.27746671438217163, 1.7795655727386475, -2.0826048851013184, -0.9928693771362305, 0.018474334850907326, -1.161310076713562, 0.6900901198387146, 0.7359904646873474, 0.44262200593948364, 0.1997338831424713, -0.018291469663381577, -1.9534811973571777, -1.0493083000183105, 0.3169674277305603, 1.5649683475494385, -1.4221311807632446, -0.02026429772377014, 0.18827414512634277, 0.25198978185653687, -0.6263166666030884, 0.7353564500808716, -0.9719439744949341, -0.013452569954097271, -0.7727081775665283, -1.4443342685699463, 0.6640608906745911, 1.4637068510055542, -0.38566911220550537, -0.9221348762512207, -0.17645537853240967, -0.30629223585128784, 0.980165958404541, -0.7882934212684631, 0.767166793346405, 0.42411959171295166, -0.19196683168411255, -2.377990484237671, -0.10911402106285095, 0.569896936416626, 0.10060498118400574, -1.1110080480575562, -0.8378725051879883, 0.020608777180314064, 2.4133405685424805, -0.6928992867469788, 0.7795541882514954, -0.9032871723175049, -0.1410427987575531, 1.114327073097229, -0.361924946308136, -2.1621768474578857, 0.7958502769470215, 1.0639113187789917, 0.07750752568244934, -0.5753203630447388, 0.24949145317077637, 0.41384294629096985, -0.34862834215164185, 2.1021556854248047, -1.9928960800170898, 1.35207998752594, -1.8493068218231201, -0.2537901997566223, 0.7169397473335266, 0.2941955626010895, 0.6708441972732544, -0.867476224899292, 0.68210768699646, -1.178848385810852, -0.7119498252868652, 0.5523808598518372, 0.7509903311729431, 0.9517792463302612, 0.6689823269844055, -0.6465727686882019, 0.557198703289032, 0.10297825187444687, 0.4102019667625427, 1.1101936101913452, 1.1435514688491821, 0.9375178813934326, -0.0002695843577384949, 0.8228845596313477, 1.0210591554641724, -0.41014397144317627, 1.7357664108276367, 0.6903853416442871, 1.3773807287216187, 0.8314800262451172, 0.8752028942108154, -0.3236069679260254, -0.5954521894454956, -0.3871742784976959, 0.36798280477523804, 1.0952725410461426, -0.24149449169635773, -0.14143574237823486, -0.011204794049263, 0.2899617552757263, 0.8358505964279175, 2.4438424110412598, 0.14907073974609375, -0.5024663209915161, 0.7322161197662354, 0.6053644418716431, -0.09013190865516663, -0.8251515030860901, -0.06918377429246902, 0.35823604464530945, 0.018638048321008682, -1.5638424158096313, 0.9021381139755249, -0.2768804132938385, -0.7086887955665588, 0.792296290397644, 1.8829442262649536, -0.6356407999992371, -0.1169944778084755, 0.23154151439666748, -0.22970889508724213, -1.3570528030395508, -0.42858177423477173, 1.1614307165145874, 0.14102977514266968, 0.1007317453622818, -1.356135368347168, -0.8883295655250549, 1.692136526107788, 0.6232141852378845];

    print("jj: ${test.length}");

    print("Predict Len: ${_predictedData.length}");

    //printPredictedList();

    double dist = _cosineSimilarity(test, predictedData);
    print("Dist: $dist");
  }

  void printPredictedList() {
    String s = "[";

    for (var v in _predictedData) {
      s += "$v, ";
    }

    s += "]";

    log(s);
  }

  List _preProcess(CameraImage image, Face faceDetected) {
    imglib.Image croppedImage = _cropFace(image, faceDetected);
    imglib.Image img = imglib.copyResizeCropSquare(croppedImage, inputDims);

    img = imglib.copyRotate(img, -90);

    if (onFaceCaptured != null) onFaceCaptured!(img);

    Float32List imageAsList = imageToByteListFloat32(img);
    return imageAsList;
  }

  imglib.Image _cropFace(CameraImage image, Face faceDetected) {
    imglib.Image convertedImage = _convertCameraImage(image);
    double x = faceDetected.boundingBox.left - 70.0;
    double y = faceDetected.boundingBox.top - 70.0;
    double w = faceDetected.boundingBox.width + 140.0;
    double h = faceDetected.boundingBox.height + 140.0;
    return imglib.copyCrop(
        convertedImage, x.round(), y.round(), w.round(), h.round());
  }

  imglib.Image _convertCameraImage(CameraImage image) {
    var img = convertToImage(image);
    var img1 = imglib.copyRotate(img, 90);
    return img1;
  }

  Float32List imageToByteListFloat32(imglib.Image image) {
    var convertedBytes = Float32List(1 * inputDims * inputDims * 3);
    var buffer = Float32List.view(convertedBytes.buffer);
    int pixelIndex = 0;

    for (var i = 0; i < inputDims; i++) {
      for (var j = 0; j < inputDims; j++) {
        var pixel = image.getPixel(j, i);
        buffer[pixelIndex++] = (imglib.getRed(pixel) - 128) / 128;
        buffer[pixelIndex++] = (imglib.getGreen(pixel) - 128) / 128;
        buffer[pixelIndex++] = (imglib.getBlue(pixel) - 128) / 128;
      }
    }
    return convertedBytes.buffer.asFloat32List();
  }

  double _cosineSimilarity(List? e1, List? e2) {
    if (e1 == null || e2 == null) throw Exception("Null argument");

    double mag1 = math.sqrt(e1.map((e) => e * e).reduce((a, b) => a + b));
    double mag2 = math.sqrt(e2.map((e) => e * e).reduce((a, b) => a + b));

    double dot = 0;

    for (int i = 0; i < e1.length; i++) {
      dot += e1[i] * e2[i];
    }

    return dot / (mag1 * mag2);
  }

  double _euclideanDistance(List? e1, List? e2) {
    if (e1 == null || e2 == null) throw Exception("Null argument");

    double sum = 0.0;
    for (int i = 0; i < e1.length; i++) {
      sum += math.pow((e1[i] - e2[i]), 2);
    }
    return math.sqrt(sum);
  }

  close() {
    _interpreter!.close();
  }
}
